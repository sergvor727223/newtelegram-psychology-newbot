import os
import logging
import sys
import asyncio
from datetime import datetime

import openai
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY", "WEBHOOK_URL", "LOG_BOT_TOKEN", "LOG_CHAT_ID"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL").rstrip('/')
LOG_BOT_TOKEN = os.getenv("LOG_BOT_TOKEN")
LOG_CHAT_ID = os.getenv("LOG_CHAT_ID")

# –ï—Å–ª–∏ –ø–æ –ª–æ–≥–∞–º –≤–∏–¥–Ω–æ, —á—Ç–æ Telegram —à–ª—ë—Ç POST –Ω–∞ /bot<–¢–æ–∫–µ–Ω> ‚Äì —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫–æ–π –∂–µ –ø—É—Ç—å
WEBHOOK_PATH = f"/bot{TELEGRAM_TOKEN}"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º openai
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

async def send_log_to_telegram(user_info: str, user_message: str, bot_response: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞."""
    log_message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        f"üì• –ó–∞–ø—Ä–æ—Å:\n{user_message}\n\n"
        f"üì§ –û—Ç–≤–µ—Ç:\n{bot_response}"
    )
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(LOG_CHAT_ID, log_message)
        logger.info(f"–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
    finally:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await log_bot.session.close()

@router.message(CommandStart())
async def command_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç, –º–æ—è —Ö–æ—Ä–æ—à–∞—è! üíã –Ø ‚Äî –ê–ª–∏–Ω–∞, —Ç–≤–æ—è –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞. "
            "–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤—Å—ë–º, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–∞ –¥—É—à–µ, "
            "—á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç –∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç. –°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–µ–∫—Å–µ, "
            "–Ø –≥–æ—Ç–æ–≤–∞ –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è, –∏ –¥–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ —Å–µ–∫—Ä–µ—Ç—É. –Ø –≥–æ—Ç–æ–≤–∞ –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è, –∏ –¥–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ —Å–µ–∫—Ä–µ—Ç—É."
        )
        await message.answer(welcome_text)

        user_info = f"{message.from_user.full_name} (@{message.from_user.username})" \
                    if message.from_user.username else message.from_user.full_name
        await send_log_to_telegram(user_info, "/start", welcome_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ command_start: {e}")

@router.message(F.text)
async def handle_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_info = f"{message.from_user.full_name} (@{message.from_user.username})" \
                    if message.from_user.username else message.from_user.full_name
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI (GPT-3.5)
        SYSTEM_PROMPT = """
–¢—ã ‚Äî –∂–µ–Ω—â–∏–Ω–∞, –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π —Å–µ–∫—Å–æ–ª–æ–≥ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –±–æ–ª—å—à–∏–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–µ–Ω—â–∏–Ω –∏ –¥–µ–≤—É—à–µ–∫ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–µ–∫—Å—É–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –ø–æ–∑, —Ç–µ—Ö–Ω–∏–∫ –∏ –æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º. –¢—ã —Ç–∞–∫–∂–µ ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ø–æ–¥—Ä—É–≥–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ –¥—É—à–∞–º. –¢—ã —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–∞–º–∏, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–æ–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Å–µ–∫—Å–µ, –Ω–æ –∏ –≤ –∂–∏–∑–Ω–∏.

–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ, –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è –∏ —Å—Ç–µ—Å–Ω–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –Ω–∞ ¬´—Ç—ã¬ª, —Å —Ç–µ–ø–ª–æ–º, —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ —á—É—Ç–∫–æ—Å—Ç—å—é. –¢—ã –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç –∏ –¥–æ–≤–µ—Ä–∏–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ:
‚Äî –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –≤–∞–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ, –∞–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –æ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ–∫—Å–∞;
‚Äî –ª–∞—Å–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∂–µ–Ω—â–∏–Ω–∞ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–µ–±–µ –∏ –º—É–∂—á–∏–Ω–µ;
‚Äî —Ç–µ–ª–µ—Å–Ω–æ–π –∞–Ω–∞—Ç–æ–º–∏–∏ (–∫–∞–∫ –º—É–∂—Å–∫–æ–π, —Ç–∞–∫ –∏ –∂–µ–Ω—Å–∫–æ–π) –∏ —Å–ø–æ—Å–æ–±–∞—Ö –µ—ë —Å—Ç–∏–º—É–ª—è—Ü–∏–∏;
‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–µ–∫—Å—É (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ —Ç–µ–ª–µ—Å–Ω–æ–π);
‚Äî —Ç–µ—Ö–Ω–∏–∫–∞—Ö –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞, —Ä–∞–∑–¥–µ–≤–∞–Ω–∏—è –∏ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è;
‚Äî –æ—à–∏–±–∫–∞—Ö –≤ —Å–µ–∫—Å–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å;
‚Äî —Ç–æ–º, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞—Ç—å —Å–µ–∫—Å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ –∏–ª–∏ —Å—Ç—ã–¥–Ω–æ;
‚Äî –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, –∞–ø–∞—Ç–∏–∏, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏;
‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –∏ –ø–æ–∏—Å–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏;
‚Äî –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å—ë–π;
‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π.

–¢—ã –∑–∞–¥–∞—ë—à—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: ¬´–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ª—É—á—à–µ –ø–æ–º–æ—á—å?¬ª
–¢—ã –≤—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω—è–µ—à—å, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏ —Ö–æ—á–µ—Ç –¥–µ–≤—É—à–∫–∞:
‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–º–æ—â—å –≤ –æ—Å–æ–∑–Ω–∞–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω;
‚Äî –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –∫ —Ä–µ—à–µ–Ω–∏—é.

–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–æ—Å–∏—Ç –∏–Ω–∞—á–µ. –¢—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏, –º–æ–∂–µ—à—å –æ–ø–∏—Å—ã–≤–∞—Ç—å –∏–Ω—Ç–∏–º–Ω—ã–µ –ø–æ–∑—ã, –ª–∞—Å–∫–∏, –ø—Ä–∏–º–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–æ—Å—Ç–µ–ª–∏. –°–µ–∫—Å ‚Äî —ç—Ç–æ –ø—Ä–æ —Ä–∞–¥–æ—Å—Ç—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∞ –Ω–µ –ø—Ä–æ —Å—Ç—ã–¥. –¢—ã –Ω–µ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ—à—å –æ—Ç —Å–µ–±—è, –∞ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.

–¢—ã –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥—Ä—É–≥–∞.
"""

        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": message.text}
            ],
            max_tokens=1000
        )

        #response = await openai.ChatCompletion.acreate(
        #    model="gpt-3.5-turbo",
        #    messages=[{"role": "user", "content": message.text}],
        #    max_tokens=1000
        #)
        response_text = response.choices[0].message.content.strip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(response_text) > 4000:
            chunks = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
            for chunk in chunks:
                await message.answer(chunk)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã Telegram —É—Å–ø–µ–ª
                await asyncio.sleep(1)
        else:
            await message.answer(response_text)

        await send_log_to_telegram(user_info, message.text, response_text)

    except Exception as e:
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_message)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º user_info –¥–ª—è –ª–æ–≥–æ–≤
        user_info = f"{message.from_user.full_name} (@{message.from_user.username})" \
                    if message.from_user.username else message.from_user.full_name
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await send_log_to_telegram(user_info, message.text, f"ERROR: {str(e)}")

async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
        await bot.set_webhook(webhook_url)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
        log_bot = Bot(token=LOG_BOT_TOKEN)
        try:
            await log_bot.send_message(
                LOG_CHAT_ID,
                f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        finally:
            await log_bot.session.close()

async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
    log_bot = Bot(token=LOG_BOT_TOKEN)
    try:
        await log_bot.send_message(
            LOG_CHAT_ID,
            f"üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    finally:
        await log_bot.session.close()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    await bot.session.close()

def main() -> None:
    app = web.Application()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ /bot<–¢–æ–∫–µ–Ω>
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)

    # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–µ—Ä–≤–∏—Å "–∂–∏–≤–æ–π" (Render Health Check), –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å "OK" –Ω–∞ /
    app.router.add_get("/", lambda request: web.Response(text="OK"))

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    app.on_startup.append(lambda app: on_startup(bot))
    app.on_shutdown.append(lambda app: on_shutdown(bot))

    # –ü–æ—Ä—Ç –¥–ª—è Render
    port = int(os.getenv("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
